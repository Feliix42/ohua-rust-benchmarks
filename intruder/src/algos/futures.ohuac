ns intruder;

use sf crate::{create_runtime, init_state, process, split_evenly, spawn_onto_pool, collect_work, statistics};


fn main(packets: Vec<Packet>, threadcount: usize) -> Vec<usize> {
    let rt = create_runtime(threadcount);
    // this initializes a stateful decoder that must be used throughout the program
    // to reconstruct flows
    let decoder = init_state();

    // this is a *stateful* operation!
    let decodeds = process(decoder, packets);

    // worklist aufsplitten
    let worklist = split_evenly(decodeds, threadcount);

    // threadpool erzeugen und threads spawnen, pool und handles zur√ºck
    let receivers = spawn_onto_pool(worklist, rt);

    // handles collecten, shutdown auf pool callen
    let paths = collect_work(receivers);

    statistics(paths)
}
