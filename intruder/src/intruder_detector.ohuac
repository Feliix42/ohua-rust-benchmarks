ns intruder;

use sf crate::{analyze_stream, init_state, process, statistics};


fn main(packets: Vec<Packet>) -> Vec<usize> {
    // this initializes a stateful decoder that must be used throughout the program
    // to reconstruct flows
    let decoder = init_state();

    // // Ohua allows us to simply eliminate the `get_packet_from_stream` function here
    // // and use smap instead
    // let output = for packet in packets {
    //     // this is a *stateful* operation!
    //     let decoded = decoder.process(packet);

    //     // this is a purely stateless operation, taking a Option<Packet> produced in
    //     // the last step and running it through the detector
    //     run_detector(decoded)
    // };

    // this is a *stateful* operation!
    let decodeds = process(decoder, packets);

    let output = for decoded in decodeds {
        // this is a purely stateless operation, taking a Option<Packet> produced in
        // the last step and running it through the detector
        analyze_stream(decoded)
    };

    statistics(output)
}
