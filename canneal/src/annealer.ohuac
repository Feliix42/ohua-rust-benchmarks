ns annealer;

use sf crate::{apply_changes, collect_work, create_rngs, create_runtime, get_rng, get_swaps, increment, reduce_temp, spawn_onto_pool};
use sf canneal::keep_going;

fn main(netlist: Arc<Netlist>, starting_temp: f64, max_temperature_steps: Option<i32>, swaps_per_temp: usize, threadcount: usize) {
    let rt = create_runtime(threadcount);

    // prepare an rng
    let rng = get_rng();

    // calculate the number of swaps per thread
    let swaps_per_thread = get_swaps(swaps_per_temp, threadcount);

    run_annealer(netlist, starting_temp, max_temperature_steps, swaps_per_thread, rng, threadcount, rt, 0)
}

fn run_annealer(netlist: Arc<Netlist>, temp: f64, max_temperature_steps: Option<i32>, swaps_per_thread: usize, rng: ChaCha12Rng, threadcount: usize, rt: Arc<Runtime>, completed_steps: i32) -> i32 {
    let new_temp = reduce_temp(temp);

    // let accepted_good_moves = 0;
    // let accepted_bad_moves = 0;

    let (rng, rngs) = create_rngs(rng, threadcount);

    let rt_data = spawn_onto_pool(netlist, rngs, new_temp, swaps_per_thread, rt);

    let (log, good_moves, bad_moves) = collect_work(rt);

    let new_netlist = apply_changes(netlist, log);

    // increment the # of completed temperature_steps
    let new_steps = increment(completed_steps);
    
    // perform the keep_going check
    if (keep_going(new_steps, max_temperature_steps, good_moves, bad_moves)) {
        run_annealer(new_netlist, new_temp, max_temperature_steps, swaps_per_thread, rng, threadcount, rt, new_steps)
    } else {
        new_steps
    }

    // TODO:
    // - implement the inner loop, maybe with batch size option
    // - implement the keep_going check
    // - add recursion
    // - add metrics for collisions (not right away if too complicated)
    // - anything else not commented out in run_annealer function
    
}