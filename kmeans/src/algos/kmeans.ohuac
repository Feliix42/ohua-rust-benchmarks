ns kmeans;

use sf crate::{calc_centroids, inc, reassign_value, should_continue, unpack_updates};

// returns the number of runs
fn main(values: Vec<Value>, centroids: Vec<Centroid>, threshold: f32) -> u32 {
    run_kmeans(values, centroids, threshold, 0)
}

fn run_kmeans(values: Vec<Value>, centroids: Vec<Centroid>, threshold: f32, iteration: u32) -> u32 {
    let updates = for val in values {
        reassign_value(val, centroids)
    };   // -> Vec<(Value, usize)>

    let (updated_values, current_delta) = unpack_updates(updates);
    // current_delta is already the final delta value, no division required

    let new_centroids = calc_centroids(updated_values, centroids);

    let next_iteration = inc(iteration);
    if should_continue(current_delta, threshold, iteration) {
        run_kmeans(updated_values, new_centroids, threshold, next_iteration)
    } else {
        iteration
    }
}
