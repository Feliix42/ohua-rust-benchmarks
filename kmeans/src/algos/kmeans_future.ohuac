ns kmeans;

use sf crate::{calc_centroids, collect_work, create_runtime, inc, should_continue, spawn_onto_pool, splitup, unpack_updates};

// returns the number of runs
fn main(values: Vec<Value>, centroids: Arc<Vec<Centroid>>, threshold: f32, threadcount: usize) -> u32 {
    let rt = create_runtime(threadcount);

    run_kmeans(values, centroids, threshold, threadcount, rt, 1)
}

fn run_kmeans(values: Vec<Value>, centroids: Arc<Vec<Centroid>>, threshold: f32, threadcount: usize, rt: Arc<tokio::runtime::Runtime>, iteration: u32) -> u32 {
    let split_values = splitup(values, threadcount);

    //  spawn work on threadpool
    let receivers = spawn_onto_pool(split_values, centroids, rt);

    // collect processed items
    let updates = collect_work(receivers);

    let (updated_values, current_delta) = unpack_updates(updates);
    // current_delta is already the final delta value, no division required

    // TODO: This use of `updated_values` requires a clone, sadly
    let new_centroids = calc_centroids(updated_values, centroids);

    let next_iteration = inc(iteration);
    if should_continue(current_delta, threshold, iteration) {
        run_kmeans(updated_values, new_centroids, threshold, threadcount, rt, next_iteration)
    } else {
        iteration
    }
}
