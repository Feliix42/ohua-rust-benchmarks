ns some_ns;

use sf crate::{is_not_empty, splitup, join};
use sf labyrinth::grid::update_maze;
use sf labyrinth::pathfinder::find_path;

fn main(maze: Maze, to_map: Vec<(Point, Point)>) -> Maze {
    transact(maze, to_map)
}


fn transact(maze: Maze, to_map: Vec<(Point, Point)>) -> Maze {
    let (tm1, tm2, tm3, tm4) = splitup(to_map);

    let part1 = for pair in tm1 {
        find_path(maze, pair)
    };
    let part2 = for pair in tm2 {
        find_path(maze, pair)
    };
    let part3 = for pair in tm3 {
        find_path(maze, pair)
    };
    let part4 = for pair in tm4 {
        find_path(maze, pair)
    };

    let paths = join(part1, part2, part3, part4);

    let (remap_paths, new_maze) = update_maze(maze, paths);

    // simple check for len == 0
    if (is_not_empty(remap_paths)) {
        transact(new_maze, remap_paths)
    } else {
        new_maze
    }
}
