ns some_ns;

use sf labyrinth::grid::update_maze;
use sf labyrinth::{increase, init_tup, is_not_empty, pack, take_n, join};
use sf labyrinth::pathfinder::find_path;

fn main(maze: Maze, to_map: Vec<(Point, Point)>, frequency: usize) -> (Maze, (u32, u32)) {
    transact(maze, to_map, frequency, init_tup())
}

fn transact(maze: Maze, to_map: Vec<(Point, Point)>, frequency: usize, stats: (u32, u32)) -> (Maze, (u32, u32)) {
    let (points, still_to_map) = take_n(to_map, frequency);

    let paths = for pair in points {
        find_path(maze, pair)
    };

    let (remap_paths, new_maze) = update_maze(maze, paths);
    let to_remap = join(remap_paths, still_to_map);

    let ct = increase(stats, remap_paths);
    let ret = pack(new_maze, stats);

    if (is_not_empty(to_remap)) {
        transact(new_maze, to_remap, frequency, ct)
    } else {
        ret
    }
}
