ns some_ns;

use sf crate::{splitup, merge};
use sf labyrinth::grid::update_maze;
use sf labyrinth::{inc_stats, is_not_empty, join, pack_stat, take_n};
use sf labyrinth::pathfinder::find_path;

fn main(maze: Maze, to_map: Vec<(Point, Point)>, frequency: usize) -> (Maze, usize) {
    transact(maze, to_map, frequency, 0)
}

fn transact(maze: Maze, to_map: Vec<(Point, Point)>, frequency: usize, stats: u32) -> (Maze, usize) {
    let (points, still_to_map) = take_n(to_map, frequency);

    // we'll do this for 4 parts now and see later
    let (tm0, tm1, tm2, tm3) = splitup(points);

    let part0 = for pair in tm0 {
        find_path(maze, pair)
    };
    let part1 = for pair in tm1 {
        find_path(maze, pair)
    };
    let part2 = for pair in tm2 {
        find_path(maze, pair)
    };
    let part3 = for pair in tm3 {
        find_path(maze, pair)
    };

    let found_paths = merge(part0, part1, part2, part3);

    // update the maze
    let (remap_paths, new_maze) = update_maze(maze, found_paths);
    let to_remap = join(remap_paths, still_to_map);

    // now stat the outcome
    let new_stats = inc_stats(stats, remap_paths);
    let ret = pack_stat(new_maze, stats);

    // Recurse if necessary
    if (is_not_empty(to_remap)) {
        transact(new_maze, to_remap, frequency, new_stats)
    } else {
        ret
    }
}
